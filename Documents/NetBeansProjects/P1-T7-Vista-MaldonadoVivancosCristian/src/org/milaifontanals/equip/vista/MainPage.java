/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package org.milaifontanals.equip.vista;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import static java.util.Map.entry;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import org.milaifontanals.equip.interficiepersistencia.GestorBDEquipException;

import org.milaifontanals.equip.model.*;

/**
 *
 * @author MAVI
 */
public class MainPage extends javax.swing.JFrame {
    private Map <String, String[]> headers= Map.ofEntries(
            entry("ge",new String[]{"","ID","Nom","Categoria","Tipus","Té Jugadors",""}),
            entry("gj",new String[]{"Nom","Cognom","Categoria","Sexe","Data Naixement","Revisió Médica",""}));
    private TableRowSorter<DefaultTableModel> ordenar;
    private List<JCheckBox> geCB = new ArrayList<>();
    private List<JCheckBox> gjCB = new ArrayList<>();
    
    public MainPage() {
        initComponents();
        settingComponents();
        loadTemporadas();
        loadCategories();
        gestorEqListCheckBox();
        gestorJugListCheckBox();
    }
    //fem un llistat dels comboboxs relacionats amb gestio d'equips per iterar-los
    public void gestorEqListCheckBox(){
        geCB.add(homeCheck);
        geCB.add(donaCheck);
        geCB.add(mixtCheck);
    }
    //fem un llistat dels comboboxs relacionats amb gestio de Jugadors per iterar-los
    public void gestorJugListCheckBox(){

    }
    //carregem l'info al comboBox
    public void loadTemporadas(){
        listTemp.removeAllItems();
        List<Temporada> temp=Constants.getTemp();
        Temporada auxSel=Constants.gettSel();
        //carregem el comboboxMavi
        for(Temporada t:temp){
            listTemp.addItem(t.toString());
        }
        //si hi ha una temporada preseleccionada la seleccionem
        if(!auxSel.toString().isEmpty()){
            listTemp.getModel().setSelectedItem(auxSel.toString());
        }
    }
    public void loadCategories(){
        List<Categoria> cat=Constants.getCategs();
        //carregem el comboboxMavi
        categoria.addItem("--Selecciona Categoria--");
        for(Categoria c: cat){
            categoria.addItem(c.getNom());
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        temporadaLabel = new javax.swing.JLabel();
        logOut = new javax.swing.JButton();
        listTemp = new javax.swing.JComboBox<>();
        gestioEq = new javax.swing.JButton();
        gestioJug = new javax.swing.JButton();
        llistatEqPanel = new javax.swing.JPanel();
        nomLabel = new javax.swing.JLabel();
        nom = new javax.swing.JTextField();
        tipusLabel = new javax.swing.JLabel();
        categoria = new javax.swing.JComboBox<>();
        catLabel = new javax.swing.JLabel();
        homeCheck = new javax.swing.JCheckBox();
        mixtCheck = new javax.swing.JCheckBox();
        donaCheck = new javax.swing.JCheckBox();
        filtrarEquip = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        geTable = new javax.swing.JTable();
        errGE = new javax.swing.JLabel();
        treureFiltres = new javax.swing.JButton();
        tempError = new javax.swing.JLabel();
        afegirTempPanel = new javax.swing.JPanel();
        novaTempLabel = new javax.swing.JLabel();
        tempInput = new javax.swing.JTextField();
        insertTemp = new javax.swing.JButton();
        infoInsertTemp = new javax.swing.JLabel();
        altaEquip = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setMaximumSize(new java.awt.Dimension(800, 500));
        jPanel1.setMinimumSize(new java.awt.Dimension(800, 500));
        jPanel1.setPreferredSize(new java.awt.Dimension(800, 500));

        temporadaLabel.setFont(new java.awt.Font("Bauhaus 93", 0, 14)); // NOI18N
        temporadaLabel.setForeground(new java.awt.Color(51, 153, 0));
        temporadaLabel.setText("Temporada");

        logOut.setBackground(new java.awt.Color(0, 153, 51));
        logOut.setFont(new java.awt.Font("Bauhaus 93", 0, 12)); // NOI18N
        logOut.setForeground(new java.awt.Color(255, 255, 255));
        logOut.setText("Log-out");
        logOut.setAlignmentX(0.5F);
        logOut.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        logOut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logOut(evt);
            }
        });

        listTemp.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tempSelected(evt);
            }
        });

        gestioEq.setBackground(new java.awt.Color(0, 153, 51));
        gestioEq.setFont(new java.awt.Font("Bauhaus 93", 0, 12)); // NOI18N
        gestioEq.setForeground(new java.awt.Color(255, 255, 255));
        gestioEq.setText("Gestió Equips");
        gestioEq.setAlignmentX(0.5F);
        gestioEq.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        gestioEq.setName("ge"); // NOI18N
        gestioEq.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelVisibility(evt);
            }
        });

        gestioJug.setBackground(new java.awt.Color(0, 153, 51));
        gestioJug.setFont(new java.awt.Font("Bauhaus 93", 0, 12)); // NOI18N
        gestioJug.setForeground(new java.awt.Color(255, 255, 255));
        gestioJug.setText("Gestió Jugadors");
        gestioJug.setAlignmentX(0.5F);
        gestioJug.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        gestioJug.setName("gj"); // NOI18N
        gestioJug.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelVisibility(evt);
            }
        });

        llistatEqPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 153, 0)), "LLISTAT D'EQUIPS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bauhaus 93", 0, 14), new java.awt.Color(0, 153, 0))); // NOI18N
        llistatEqPanel.setMaximumSize(new java.awt.Dimension(782, 297));
        llistatEqPanel.setMinimumSize(new java.awt.Dimension(782, 297));

        nomLabel.setFont(new java.awt.Font("Bauhaus 93", 0, 14)); // NOI18N
        nomLabel.setText("Nom:");

        nom.setName("nom"); // NOI18N

        tipusLabel.setFont(new java.awt.Font("Bauhaus 93", 0, 14)); // NOI18N
        tipusLabel.setText("Tipus:");

        categoria.setName("cat"); // NOI18N

        catLabel.setFont(new java.awt.Font("Bauhaus 93", 0, 14)); // NOI18N
        catLabel.setText("Categories:");

        homeCheck.setText("Masculí");
        homeCheck.setName("H"); // NOI18N

        mixtCheck.setText("Mixt");
        mixtCheck.setName("M"); // NOI18N

        donaCheck.setText("Femení");
        donaCheck.setName("D"); // NOI18N

        filtrarEquip.setBackground(new java.awt.Color(0, 153, 51));
        filtrarEquip.setFont(new java.awt.Font("Bauhaus 93", 0, 12)); // NOI18N
        filtrarEquip.setForeground(new java.awt.Color(255, 255, 255));
        filtrarEquip.setText("Filtrar");
        filtrarEquip.setToolTipText("");
        filtrarEquip.setAlignmentX(0.5F);
        filtrarEquip.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        filtrarEquip.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                filtrarEquip(evt);
            }
        });

        geTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        geTable.setGridColor(new java.awt.Color(51, 153, 0));
        geTable.setMaximumSize(new java.awt.Dimension(300, 80));
        geTable.setMinimumSize(new java.awt.Dimension(300, 80));
        geTable.setName("geTable"); // NOI18N
        geTable.setShowVerticalLines(true);
        jScrollPane1.setViewportView(geTable);

        errGE.setForeground(new java.awt.Color(255, 0, 0));
        errGE.setName("errGE"); // NOI18N

        treureFiltres.setBackground(new java.awt.Color(0, 153, 51));
        treureFiltres.setFont(new java.awt.Font("Bauhaus 93", 0, 12)); // NOI18N
        treureFiltres.setForeground(new java.awt.Color(255, 255, 255));
        treureFiltres.setText("Treure Filtres");
        treureFiltres.setToolTipText("");
        treureFiltres.setAlignmentX(0.5F);
        treureFiltres.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        treureFiltres.setName("treureFiltres"); // NOI18N
        treureFiltres.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                treureFiltres(evt);
            }
        });

        javax.swing.GroupLayout llistatEqPanelLayout = new javax.swing.GroupLayout(llistatEqPanel);
        llistatEqPanel.setLayout(llistatEqPanelLayout);
        llistatEqPanelLayout.setHorizontalGroup(
            llistatEqPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(llistatEqPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(llistatEqPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(llistatEqPanelLayout.createSequentialGroup()
                        .addGroup(llistatEqPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nomLabel)
                            .addComponent(catLabel))
                        .addGap(18, 18, 18)
                        .addGroup(llistatEqPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(categoria, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nom, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(69, 69, 69)
                        .addGroup(llistatEqPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(llistatEqPanelLayout.createSequentialGroup()
                                .addComponent(tipusLabel)
                                .addGap(26, 26, 26)
                                .addComponent(homeCheck)
                                .addGap(18, 18, 18)
                                .addComponent(donaCheck)
                                .addGap(18, 18, 18)
                                .addComponent(mixtCheck))
                            .addComponent(errGE, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(llistatEqPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filtrarEquip, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(treureFiltres, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        llistatEqPanelLayout.setVerticalGroup(
            llistatEqPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(llistatEqPanelLayout.createSequentialGroup()
                .addGroup(llistatEqPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomLabel)
                    .addComponent(nom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tipusLabel)
                    .addComponent(homeCheck)
                    .addComponent(mixtCheck)
                    .addComponent(donaCheck)
                    .addComponent(filtrarEquip, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(llistatEqPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(llistatEqPanelLayout.createSequentialGroup()
                        .addGroup(llistatEqPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(llistatEqPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(catLabel)
                                .addComponent(categoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(errGE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46))
                    .addGroup(llistatEqPanelLayout.createSequentialGroup()
                        .addComponent(treureFiltres, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        treureFiltres.getAccessibleContext().setAccessibleName("desfiltrar");

        tempError.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N

        afegirTempPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 153, 0)), "Afegir nova Temporada:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bauhaus 93", 0, 12), new java.awt.Color(0, 153, 0))); // NOI18N
        afegirTempPanel.setMaximumSize(new java.awt.Dimension(455, 92));
        afegirTempPanel.setMinimumSize(new java.awt.Dimension(455, 92));

        novaTempLabel.setFont(new java.awt.Font("Bauhaus 93", 0, 14)); // NOI18N
        novaTempLabel.setText("Nova Temporada:");

        tempInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                controlTemp(evt);
            }
        });

        insertTemp.setBackground(new java.awt.Color(0, 153, 51));
        insertTemp.setFont(new java.awt.Font("Bauhaus 93", 0, 12)); // NOI18N
        insertTemp.setForeground(new java.awt.Color(255, 255, 255));
        insertTemp.setText("Insertar Temporada");
        insertTemp.setToolTipText("");
        insertTemp.setAlignmentX(0.5F);
        insertTemp.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        insertTemp.setEnabled(false);
        insertTemp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                afegirTemporada(evt);
            }
        });

        infoInsertTemp.setFont(new java.awt.Font("Arial", 2, 10)); // NOI18N
        infoInsertTemp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        infoInsertTemp.setText("<html>Inserta únicament l'any d'inici de la nova temporada.<br> No pot ser superior al any actual+1 ni posterior a 1980.</html>");
        infoInsertTemp.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout afegirTempPanelLayout = new javax.swing.GroupLayout(afegirTempPanel);
        afegirTempPanel.setLayout(afegirTempPanelLayout);
        afegirTempPanelLayout.setHorizontalGroup(
            afegirTempPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(afegirTempPanelLayout.createSequentialGroup()
                .addGroup(afegirTempPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(afegirTempPanelLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(novaTempLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tempInput, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(insertTemp, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(afegirTempPanelLayout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(infoInsertTemp, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        afegirTempPanelLayout.setVerticalGroup(
            afegirTempPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(afegirTempPanelLayout.createSequentialGroup()
                .addGroup(afegirTempPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(insertTemp, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(afegirTempPanelLayout.createSequentialGroup()
                        .addGroup(afegirTempPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(novaTempLabel)
                            .addComponent(tempInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(infoInsertTemp, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        altaEquip.setBackground(new java.awt.Color(0, 153, 51));
        altaEquip.setFont(new java.awt.Font("Bauhaus 93", 0, 12)); // NOI18N
        altaEquip.setForeground(new java.awt.Color(255, 255, 255));
        altaEquip.setText("Alta Equip");
        altaEquip.setToolTipText("");
        altaEquip.setAlignmentX(0.5F);
        altaEquip.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        altaEquip.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                altaEquip(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(gestioJug, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gestioEq, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(105, 105, 105)
                .addComponent(temporadaLabel)
                .addGap(18, 18, 18)
                .addComponent(listTemp, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 190, Short.MAX_VALUE)
                .addComponent(logOut, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tempError, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(altaEquip, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(llistatEqPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(62, 62, 62)
                    .addComponent(afegirTempPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(283, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(logOut, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(temporadaLabel)
                    .addComponent(listTemp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gestioEq, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gestioJug, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(tempError, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(altaEquip, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(llistatEqPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(63, 63, 63)
                    .addComponent(afegirTempPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(345, Short.MAX_VALUE)))
        );

        gestioJug.getAccessibleContext().setAccessibleName("gj");
        gestioJug.getAccessibleContext().setAccessibleDescription("gj");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Com Swing no permet fer modificacions a continuació fem un programa per a
     * definir l'estat de certs objectes
     * @param evt 
     */
    private void settingComponents(){
        llistatEqPanel.setVisible(false);
        altaEquip.setVisible(false);
    }
    private void logOut(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logOut
        this.dispose();
        new Login().setVisible(true);
    }//GEN-LAST:event_logOut
    //limitem els valors que es poden afegir com a new string a 4 i només numeros

    private void tempSelected(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tempSelected
        if(listTemp.getSelectedIndex()!=-1){
            String aux=listTemp.getSelectedItem().toString();
            String tSel=Constants.gettSel().toString();
            if(!aux.equals(tSel)){
                /**
                 * si hi ha hagut un cambi de temporada fixem la nova
                 * temporada seleccionada...
                 */
                Constants.settSel(new Temporada(aux));
                /**
                 * ... i  calculem de nou els anys de naixement de les Categories
                 * en funció de la nova temporada seleccionada
                */
                Constants.setAnysCategsAmbTemp();
                int vista=(llistatEqPanel.isVisible()?1:0);
                String vistaNom="";
                //1 gestor Equip, 2 gestor Jugador, 0 cap gestor
                if(vista==1){
                    vistaNom="ge";
                }else if(vista==2){
                    vistaNom="gj";
                }
                if(vistaNom.length()!=0){
                    crearTableModel(vistaNom);
                }
            }
        }
    }//GEN-LAST:event_tempSelected

    private void altaEquip(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_altaEquip

    }//GEN-LAST:event_altaEquip
    //únicament permitim números per afegir Temporades
    private void controlTemp(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_controlTemp
        int key=evt.getKeyChar();
        int len=tempInput.getText().length();
        boolean enabled=false;
        /**
         * com la key es detecta abans de que s'afegeixi al textfield controlem
         * la llaragaria real aqui
         * */
        if(key!=8 || (key>=48 && key<=57 && len!=4)){
            len++;
        }
        //unicament permitim borrar i afegir numeros
        if((key>=48 && key<=57 && len<=4) || key==8){
            tempInput.setEditable(true);
        }else{
            tempInput.setEditable(false);
        }
        /**
         * nomes activem el botó si el length del text es de 4 o mes
         * per temes del control ficat per preme les tecles
         */
        if(len>=4){
            enabled=true;
        }
        insertTemp.setEnabled(enabled);
    }//GEN-LAST:event_controlTemp

    private void afegirTemporada(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_afegirTemporada
        String inputTemp=tempInput.getText();
        String auxNewTemp=inputTemp+"/"+(Integer.parseInt(inputTemp)+1);
        Temporada aux= new Temporada();
        String err=aux.setAny_temp(auxNewTemp);
        if(err!=""){
            tempError.setForeground(Color.RED);
        }else{
            try {
                Constants.getgBD().afegirTemporada(aux);
                Constants.getgBD().confirmarCanvis();
                err="<html>Temporada afegida correctament!</html>";
                tempError.setForeground(Color.GREEN);
                Constants.setTemp(); //carregem de nou les temporades
                tempInput.setText("");
                loadTemporadas(); //tornem a carregar el combobox
            } catch (GestorBDEquipException ex) {
                err="<html>"+ex.getMessage()+"</html>";
            }
        }
        tempError.setText(err);
    }//GEN-LAST:event_afegirTemporada

    private void filtrarEquip(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filtrarEquip
        crearTableModel(modeActual());
    }//GEN-LAST:event_filtrarEquip

    //controlem la visibililtat dels panels de Jugadors i Equips
    private void panelVisibility(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelVisibility
        boolean show=true;
        JButton btn = (JButton)evt.getSource();
        String bPressed = btn.getName();
        if(bPressed!="ge"){
            show=false;
        }
        //si el panel d'equips es visible el de botó está desactivat
        gestioEq.setEnabled(!show);
        llistatEqPanel.setVisible(show);
        altaEquip.setVisible(show);
        //el mateix per als equips pero fan servir l'inversa del show
        gestioJug.setEnabled(show);
        crearTableModel(bPressed);
    }//GEN-LAST:event_panelVisibility

    //programa per a sapiguern en quin mode estem
    private String modeActual(){
        String mode="";
        if(!gestioEq.isEnabled()){
            mode=gestioEq.getName();
        }else{
            mode=gestioJug.getName();
        }
        return mode;
    }
    private void treureFiltres(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treureFiltres
        nom.setText("");
        for(JCheckBox c : geCB){
            c.setSelected(false);
        }
        categoria.setSelectedIndex(0);
        crearTableModel(modeActual());
    }//GEN-LAST:event_treureFiltres
    //programa per revisar els filtres tant per equips com per jugadors
    private Map<String, String> filtresAplicats(String btn){
        Map<String, String> auxFilt= new HashMap<>();
        switch(btn){
            case "ge": //en el cas del gestor d'equips
                //verifiquem si han afegit un nom
                String n=nom.getText();
                if(!n.isEmpty()){
                    auxFilt.put(nom.getName(), "'"+n+"'");
                }
                //si han seleccionat una categoria
                if(categoria.getSelectedIndex()>0){
                    int categ = Constants.idCategoria(categoria.getSelectedItem().toString());
                    auxFilt.put(categoria.getName(), String.valueOf(categ));
                }
                //iterem amb la funcio comboBoxTipus() per veure si han seleccionat un combobox o varis
                String tipusList=comboBoxTipus();
                if(tipusList.length()>0){
                    auxFilt.put("tipus", tipusList);
                }
                break;
            case "gj":
                break;
        }
        return auxFilt;
    }
    //programa que revisa quines opcions han sigut escollides en el Gestor D'equips en quan a tipus (sexe)
    private String comboBoxTipus(){
        String sel="";
        for(JCheckBox c : geCB){
            if(c.isSelected()){
                if(sel.length()>0){
                    sel+=", ";
                }
                sel+="'"+c.getName()+"'";
            }
        }
        return sel;
    }
    //creem dinámicament la taula
    private void crearTableModel(String btn){
        int numColumns=headers.get(btn).length;
        Map<String, String> filters = new HashMap<>(filtresAplicats(btn));
        DefaultTableModel mt= new DefaultTableModel(new Object[0][numColumns],headers.get(btn));
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        JScrollPane scrollPane;
        int del=0, sel=0;
        if(btn=="ge"){
            errGE.setText("");//ens asegurem que no queda cap error a la finestra
            del=5;//setejem la columna que fará de botó de delete
            geTable.setModel(mt);//setejem columnes
            //amagem la columna ID que la farem servir per a eliminar/
            geTable.removeColumn(geTable.getColumnModel().getColumn(1));
            try {
                //Centrem les columnes necesaries (Categoria, tipus, te jugadors):
                for(int i=2; i<(numColumns-1);i++){
                    geTable.getColumnModel().getColumn(i).setCellRenderer( centerRenderer );
                }
                List<Equip> infoEq =Constants.getgBD().llistatEquips(Constants.gettSel(), filters);
                for(Equip e : infoEq){
                    Object[] info= new Object[]{
                        "Seleccionar",
                        e.getId(),
                        e.getNom(),
                        Constants.nomCategoria(e.getCat()),
                        Constants.tipusNom(e.getTipus()),
                        (Constants.getgBD().equipTeTitulars(e)==0)?"No":"Si",
                        "Eliminar"
                        };
                    mt.addRow(info);
                }
                taulaConfiguration(geTable,sel,del);
            } catch (GestorBDEquipException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage(), "InfoBox: " + "DB Connection Error", JOptionPane.INFORMATION_MESSAGE);
            }
        }/*else{
            try {
                List<Jugador> infoJug =Constants.getgBD().llistatJugadors(filters);
            } catch (GestorBDEquipException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage(), "InfoBox: " + "DB Connection Error", JOptionPane.INFORMATION_MESSAGE);
            }
        }*/

    }
    private void taulaConfiguration(JTable t, int sel, int del){
        t.setAutoCreateRowSorter(true);
        if(t.getName()=="geTable"){
            //fem la primera columna sigui button per seleccionar
            ButtonColumn buttonSel = new ButtonColumn(t,selEq,sel);
            //fem la última columna sigui button per eliminar
            ButtonColumn buttonDel= new ButtonColumn(t,delEq,del);
        }

    }
    private int confirmacióEliminar(String nom, String tName){
        int resposta=JOptionPane.showConfirmDialog(null, "Estas segur que vols eliminar a "+nom+"?", "Compte!",
			JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        String err="";
        if(resposta==0){
            try {
                Constants.getgBD().confirmarCanvis();
            } catch (GestorBDEquipException ex) {
                err=ex.getMessage();
                resposta=1;
            }
        }else{
            try {
                Constants.getgBD().desferCanvis();
            } catch (GestorBDEquipException ex) {
                 err=ex.getMessage();
                 resposta=1;
            }
        }
        if(tName=="geTable"){
            errGE.setText(err);
        }else{
            
        }
        return resposta;
    }
    //Font: https://tips4java.wordpress.com/2009/07/12/table-button-column/
    Action selEq= new AbstractAction(){
        public void actionPerformed(ActionEvent e){
            JTable table = (JTable)e.getSource(); 
            String name= table.getName();
            int row = Integer.valueOf( e.getActionCommand() );
            int id= Integer.valueOf(((DefaultTableModel)table.getModel()).getValueAt(row, 1).toString());
            //depenent de la taula mostrarem un jugador (gjTable) o un equip (geTable)
            if(name=="geTable"){
                System.out.println("Mostrem l'equip amb id = "+id);
            }else{
                
            }
        }
    };
    Action delEq= new AbstractAction(){
        public void actionPerformed(ActionEvent e){
            JTable table = (JTable)e.getSource(); 
            String tName= table.getName();
            int row = Integer.valueOf( e.getActionCommand() );
            int id= Integer.valueOf(((DefaultTableModel)table.getModel()).getValueAt(row, 1).toString());
            String nom= ((DefaultTableModel)table.getModel()).getValueAt(row, 2).toString();
            Boolean err=false;
            //depenent de la taula eliminarem un jugador (gjTable) o un equip (geTable)
            if(tName=="geTable"){
                try {
                    Constants.getgBD().eliminarEquip(id);
                } catch (GestorBDEquipException ex) {
                    errGE.setText(ex.getMessage());
                    err=true;
                }
            }else{
                try {
                    Constants.getgBD().eliminarJugador(id);
                } catch (GestorBDEquipException ex) {
                    Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            //si no hi ha hagut capp error en intentar eliminar el jugador/equip
            if(!err){
                //demanem confirmació abans d'eliminar, si tot ha anat bé retorna 0
                if(confirmacióEliminar(nom, tName)==0 && !err){
                    //si confirma, després de fer el delete a la BBDD, ens carregem la row.
                    ((DefaultTableModel)table.getModel()).removeRow(row);
                }
            }

        }
    };

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel afegirTempPanel;
    private javax.swing.JButton altaEquip;
    private javax.swing.JLabel catLabel;
    private javax.swing.JComboBox<String> categoria;
    private javax.swing.JCheckBox donaCheck;
    private javax.swing.JLabel errGE;
    private javax.swing.JButton filtrarEquip;
    private javax.swing.JTable geTable;
    private javax.swing.JButton gestioEq;
    private javax.swing.JButton gestioJug;
    private javax.swing.JCheckBox homeCheck;
    private javax.swing.JLabel infoInsertTemp;
    private javax.swing.JButton insertTemp;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> listTemp;
    private javax.swing.JPanel llistatEqPanel;
    private javax.swing.JButton logOut;
    private javax.swing.JCheckBox mixtCheck;
    private javax.swing.JTextField nom;
    private javax.swing.JLabel nomLabel;
    private javax.swing.JLabel novaTempLabel;
    private javax.swing.JLabel tempError;
    private javax.swing.JTextField tempInput;
    private javax.swing.JLabel temporadaLabel;
    private javax.swing.JLabel tipusLabel;
    private javax.swing.JButton treureFiltres;
    // End of variables declaration//GEN-END:variables
}
